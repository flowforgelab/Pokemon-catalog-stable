generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_NON_POOLING")
}

model Card {
  id            String   @id @default(cuid())
  pokemonTcgId  String   @unique
  name          String
  supertype     String
  subtypes      String[]
  types         String[]
  hp            String?
  number        String
  artist        String?
  rarity        String?
  setId         String
  setName       String
  setSeries     String
  setTotal      Int
  imageSmall    String
  imageLarge    String
  marketPrice   Float?
  tcgplayerUrl  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Game mechanics
  evolvesFrom     String?
  evolvesTo       String[]
  retreatCost     Int?
  regulationMark  String?
  rules           String[]
  flavorText      String?
  
  // Legalities
  standardLegal   Boolean  @default(false)
  expandedLegal   Boolean  @default(false)
  unlimitedLegal  Boolean  @default(false)
  
  // Relations
  attacks         Attack[]
  abilities       Ability[]
  weaknesses      Weakness[]
  resistances     Resistance[]
  collectionCards CollectionCard[]
  deckCards       DeckCard[]

  @@index([name])
  @@index([types])
  @@index([setName])
  @@index([rarity])
  @@index([evolvesFrom])
  @@index([regulationMark])
}

model Attack {
  id                  String   @id @default(cuid())
  cardId              String
  name                String
  cost                String[]
  damage              String?
  text                String?
  convertedEnergyCost Int
  
  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
  
  @@index([cardId])
}

model Ability {
  id     String @id @default(cuid())
  cardId String
  name   String
  type   String
  text   String
  
  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
  
  @@index([cardId])
}

model Weakness {
  id     String @id @default(cuid())
  cardId String
  type   String
  value  String
  
  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
  
  @@index([cardId])
}

model Resistance {
  id     String @id @default(cuid())
  cardId String
  type   String
  value  String
  
  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
  
  @@index([cardId])
}

model Collection {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cards CollectionCard[]

  @@index([userId])
}

model CollectionCard {
  id           String   @id @default(cuid())
  collectionId String
  cardId       String
  quantity     Int      @default(1)
  condition    String   @default("NM")
  language     String   @default("EN")
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  card       Card       @relation(fields: [cardId], references: [id])

  @@unique([collectionId, cardId, condition, language])
  @@index([collectionId])
  @@index([cardId])
}

model Deck {
  id          String   @id @default(cuid())
  userId      String
  name        String
  format      String   @default("standard")
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cards DeckCard[]

  @@index([userId])
}

model DeckCard {
  id        String   @id @default(cuid())
  deckId    String
  cardId    String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deck Deck @relation(fields: [deckId], references: [id], onDelete: Cascade)
  card Card @relation(fields: [cardId], references: [id])

  @@unique([deckId, cardId])
  @@index([deckId])
  @@index([cardId])
}